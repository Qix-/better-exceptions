python2 test/test.py


Traceback (most recent call last):
  File "test/test.py", line 17, in <module>
    shallow(bar, [31m15[m)
    [36mâ”‚       â”” 2[m
    [36mâ”” <function shallow at 0xDEADBEEF>[m
  File "test/test.py", line 8, in shallow
    deep(a + b)
    [36mâ”‚    â”‚   â”” 15[m
    [36mâ”‚    â”” 2[m
    [36mâ”” <function deep at 0xDEADBEEF>[m
  File "test/test.py", line 13, in deep
    [33;1massert[m val > [31m10[m and foo == [31m60[m
    [36m       â”‚            â”” 52[m
    [36m       â”” 17[m
AssertionError: [33;1massert[m val > [31m10[m and foo == [31m60[m



python2 test/test_color.py


True



python2 test/test_encoding.py


Traceback (most recent call last):
  File "test/test_encoding.py", line 14, in <module>
    div()
    [36mâ”” <function div at 0xDEADBEEF>[m
  File "test/test_encoding.py", line 11, in div
    [33;1mreturn[m _deep([31m'å¤©'[m)
    [36m       â”” <function _deep at 0xDEADBEEF>[m
  File "test/test_encoding.py", line 8, in _deep
    [33;1mreturn[m [31m1[m / val
    [36m           â”” 'å¤©'[m
TypeError: unsupported operand type(s) for /: 'int' and 'str'



./test/test_interactive.sh


spawn python2 -m better_exceptions -q

>>> import better_exceptions
>>> def foo(a):
...     assert a > 10
... 
>>> foo(1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
    foo([31m1[m)
    [36mâ”” <function foo at 0xDEADBEEF>[m
  File "<console>", line 2, in foo
    [33;1massert[m a > [31m10[m
    [36m       â”” 1[m
AssertionError: [33;1massert[m a > [31m10[m
>>> exit()



./test/test_string.sh



import better_exceptions; better_exceptions.hook(); a = 5; assert a > 10 # this should work fine

Traceback (most recent call last):
  File "<string>", line 1, in <module>
    [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m5[m; [33;1massert[m a > [31m10[m [2;37m# this should work fine[m
    [36m                          â”‚                         â”‚             â”” 5[m
    [36m                          â”‚                         â”” 5[m
    [36m                          â”” <module 'test_module' from '/removed/for/test/purposes.py'>[m
AssertionError: [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m5[m; [33;1massert[m a > [31m10[m [2;37m# this should work fine[m

Traceback (most recent call last):
  File "<string>", line 1, in <module>
    [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m5[m; [33;1massert[m a > [31m10[m [2;37m# this should work fine[m
    [36m                          â”‚                         â”‚             â”” 5[m
    [36m                          â”‚                         â”” 5[m
    [36m                          â”” <module 'test_module' from '/removed/for/test/purposes.py'>[m
AssertionError: [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m5[m; [33;1massert[m a > [31m10[m [2;37m# this should work fine[m

from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why hello there"; print(a); assert False

Traceback (most recent call last):
  File "<string>", line 1, in <module>
    from __future__ import print_function; [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m'why hello there'[m; [35;1mprint[m(a); [33;1massert[m [35;1mFalse[m
    [36m                                                                 â”‚                         â”‚                            â”” 'why hello there'[m
    [36m                                                                 â”‚                         â”” 'why hello there'[m
    [36m                                                                 â”” <module 'test_module' from '/removed/for/test/purposes.py'>[m
AssertionError: from __future__ import print_function; [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m'why hello there'[m; [35;1mprint[m(a); [33;1massert[m [35;1mFalse[m
why hello there

Traceback (most recent call last):
  File "<string>", line 1, in <module>
    from __future__ import print_function; [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m'why hello there'[m; [35;1mprint[m(a); [33;1massert[m [35;1mFalse[m
    [36m                                                                 â”‚                         â”‚                            â”” 'why hello there'[m
    [36m                                                                 â”‚                         â”” 'why hello there'[m
    [36m                                                                 â”” <module 'test_module' from '/removed/for/test/purposes.py'>[m
AssertionError: from __future__ import print_function; [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m'why hello there'[m; [35;1mprint[m(a); [33;1massert[m [35;1mFalse[m
why hello there

from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why     hello          " + "   there"; print(a); assert False

Traceback (most recent call last):
  File "<string>", line 1, in <module>
    from __future__ import print_function; [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m'why     hello          '[m + [31m'   there'[m; [35;1mprint[m(a); [33;1massert[m [35;1mFalse[m
    [36m                                                                 â”‚                         â”‚                                                 â”” 'why     hello             there'[m
    [36m                                                                 â”‚                         â”” 'why     hello             there'[m
    [36m                                                                 â”” <module 'test_module' from '/removed/for/test/purposes.py'>[m
AssertionError: from __future__ import print_function; [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m'why     hello          '[m + [31m'   there'[m; [35;1mprint[m(a); [33;1massert[m [35;1mFalse[m
why     hello             there

Traceback (most recent call last):
  File "<string>", line 1, in <module>
    from __future__ import print_function; [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m'why     hello          '[m + [31m'   there'[m; [35;1mprint[m(a); [33;1massert[m [35;1mFalse[m
    [36m                                                                 â”‚                         â”‚                                                 â”” 'why     hello             there'[m
    [36m                                                                 â”‚                         â”” 'why     hello             there'[m
    [36m                                                                 â”” <module 'test_module' from '/removed/for/test/purposes.py'>[m
AssertionError: from __future__ import print_function; [33;1mimport[m better_exceptions; better_exceptions.hook(); a = [31m'why     hello          '[m + [31m'   there'[m; [35;1mprint[m(a); [33;1massert[m [35;1mFalse[m
why     hello             there



python2 test/test_logging.py


ERROR:__main__:callback failed
Traceback (most recent call last):
  File "test/test_logging.py", line 16, in foo
    cb()
    [36mâ”” <function bar3 at 0xDEADBEEF>[m
  File "test/test_logging.py", line 33, in bar3
    [33;1mraise[m [35;1mException[m([31m'this is a test exception'[m)
Exception: this is a test exception

ERROR:__main__:callback failed
Traceback (most recent call last):
  File "test/test_logging.py", line 16, in foo
    cb()
    [36mâ”” <function bar4 at 0xDEADBEEF>[m
  File "test/test_logging.py", line 38, in bar4
    [33;1massert[m baz == [31m90[m
    [36m       â”” 52[m
AssertionError: [33;1massert[m baz == [31m90[m




python2 test/test_truncating.py


Traceback (most recent call last):
  File "test/test_truncating.py", line 12, in <module>
    div()
    [36mâ”” <function ...[m
  File "test/test_truncating.py", line 9, in div
    [33;1mreturn[m [31m1[m / var
    [36m           â”” '999999999...[m
TypeError: unsupported operand type(s) for /: 'int' and 'str'



python2 test/test_truncating_disabled.py


Traceback (most recent call last):
  File "test/test_truncating_disabled.py", line 12, in <module>
    div()
    [36mâ”” <function div at 0xDEADBEEF>[m
  File "test/test_truncating_disabled.py", line 9, in div
    [33;1mreturn[m [31m1[m / var
    [36m           â”” '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'[m
TypeError: unsupported operand type(s) for /: 'int' and 'str'



python2 test/test_indentation_error.py


Traceback (most recent call last):
  File "test/test_indentation_error.py", line 13, in <module>
    [33;1mexec[m(code)
    [36m     â”” '
if True:
    a = 5
        print("foobar")  #intentional faulty indentation here.
    b = 7
'[m
File "<string>", line 4
    print("foobar")  #intentional faulty indentation here.
    ^
IndentationError: unexpected indent



python2 test/test_syntax_error.py


Traceback (most recent call last):
  File "test/test_syntax_error.py", line 12, in <module>
    [33;1mexec[m(code)
    [36m     â”” '
if True:
    a = 5
    b = 7 *
'[m
File "<string>", line 4
    b = 7 *
          ^
SyntaxError: invalid syntax



python2 test/test_unittest_patch.py


    return a + b
TypeError: unsupported operand type(s) for +: 'int' and 'str'
  File "test/test_unittest_patch.py", line 15, in test_add
    self.assertEqual(add([31m1[m, [31m'2'[m), [31m3[m)
    [36mâ”‚                â”” <function add at 0xDEADBEEF>[m
    [36mâ”” <__main__.MyTestCase testMethod=test_add>[m
  File "test/test_unittest_patch.py", line 10, in add
    [33;1mreturn[m a + b
    [36m       â”‚   â”” '2'[m
    [36m       â”” 1[m
TypeError: unsupported operand type(s) for +: 'int' and 'str'



